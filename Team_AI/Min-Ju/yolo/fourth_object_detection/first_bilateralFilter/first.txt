***********************************************************************************

<적용사항>
1. 416x416으로 모든 데이터 크기 맞추기
resize로 데이터 크기 맞춤.

2. 해상도 높이기(bilateralFilter)
 https://deep-learning-study.tistory.com/164

3. resize한 것에 대한 좌표 재설정

4. cfg 파일도 다시 설정하기

5. animal, bird, human 데이터 클래스별로 train, test, valid 크기 맞추기

6. yolov4 정확도 높이기(cfg 관련) 적용

저번에도 그렇고 animal, human은 좋은 방식을 쓰면 좋아지는데
bird는 좋아지는 현상을 찾을 수 없다.

***********************************************************************************

# Number of detected objects per class
animal: 90 (tp:80, fp:10)
bird: 345 (tp:280, fp:65)
human: 79 (tp:64, fp:15)
tp: 잘 예측함, fp: flase인데 positive라고 판단함
예측한 수가 bird가 확실히 많아서 그렇지 잘한거 아닌가..?

***********************************************************************************

https://deepbaksuvision.github.io/Modu_ObjectDetection/posts/04_01_Review_of_YOLO_Paper.html
02.04. YOLO의 한계
YOLO 모델의 한계점들이 몇 가지 있습니다. 
우선 YOLO는 각 그리드 셀마다 오직 하나의 객체만을 검출할 수 있습니다. 
이는 객체 검출에서 아주 강한 공간적 제약(spatial constraints)입니다. 
이러한 공간적 제약으로 인해 YOLO는 '새 떼'와 같이 작은 객체들이 무리 지어 있는 경우의 
객체 검출이 제한적일 수 있습니다.
 그리고 바운딩 박스를 데이터로부터 학습하기 때문에 일반화 능력이 떨어지고, 
이로 인해 train time에 보지 못했던 종횡비의 객체를 잘 검출하지 못합니다. 
그리고 마지막으로 YOLO에서 가장 문제가 되는 부분이 바로 잘못된 localizations입니다.

***********************************************************************************

<제안사항>
-> 250개 6000번 돌린게 70.97%, 저번에 샤프닝 데이터들이랑 섞여서 총 3000장? 정도 돌렸던게 75.35%이니까
-> 지금(76.82%)처럼 돌리되, 데이터셋을 좀 더 늘려서 해보는게 좋을듯함.

***********************************************************************************

<앞으로 해야할 것>
대기><